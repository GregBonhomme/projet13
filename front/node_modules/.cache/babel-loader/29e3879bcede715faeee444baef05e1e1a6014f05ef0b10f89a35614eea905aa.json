{"ast":null,"code":"async function useToken(token) {\n  try {\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json; charset=utf-8\",\n        \"Authorization\": \"Bearer \" + token\n      }\n    });\n    const profileData = await response.json();\n    if (profileData.status === 200) {\n      const userData = await profileData.body;\n      return userData;\n    } else {\n      return \"Invalid token\";\n    }\n  } catch (error) {\n    console.error(\"An error occured\", error);\n  }\n}\nexport default useToken;","map":{"version":3,"names":["useToken","token","response","fetch","method","headers","profileData","json","status","userData","body","error","console"],"sources":["C:/Users/grego/Documents/temp/OpenClassroom/projet13/front/src/utils/useToken/index.js"],"sourcesContent":["\r\nasync function useToken (token) {\r\n\r\n    try {\r\n        const response = await fetch(\"http://localhost:3001/api/v1/user/profile\",{\r\n            method:\"POST\",\r\n            headers:{\r\n                \"content-type\":\"application/json; charset=utf-8\",\r\n                \"Authorization\":\"Bearer \" + token\r\n                }\r\n            })\r\n        const profileData = await response.json()\r\n        \r\n        if (profileData.status === 200) {\r\n            const userData = await profileData.body\r\n            return userData\r\n        } else {\r\n            return \"Invalid token\"\r\n        }\r\n    } catch (error) {\r\n        console.error(\"An error occured\",error)\r\n    }\r\n}\r\n\r\nexport default useToken"],"mappings":"AACA,eAAeA,QAAQA,CAAEC,KAAK,EAAE;EAE5B,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAC;MACrEC,MAAM,EAAC,MAAM;MACbC,OAAO,EAAC;QACJ,cAAc,EAAC,iCAAiC;QAChD,eAAe,EAAC,SAAS,GAAGJ;MAC5B;IACJ,CAAC,CAAC;IACN,MAAMK,WAAW,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAEzC,IAAID,WAAW,CAACE,MAAM,KAAK,GAAG,EAAE;MAC5B,MAAMC,QAAQ,GAAG,MAAMH,WAAW,CAACI,IAAI;MACvC,OAAOD,QAAQ;IACnB,CAAC,MAAM;MACH,OAAO,eAAe;IAC1B;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAACA,KAAK,CAAC;EAC3C;AACJ;AAEA,eAAeX,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}